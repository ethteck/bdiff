name: Rust

on:
  push:
    paths-ignore:
      - '*.md'
      - 'LICENSE*'
  pull_request:
  workflow_dispatch:

env:
  BUILD_PROFILE: release-lto
  CARGO_TARGET_DIR: target
  CARGO_INCREMENTAL: 0

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Cache Rust workspace
        uses: Swatinem/rust-cache@v2
      - name: Cargo check
        run: cargo check --all-features
      - name: Cargo clippy
        run: cargo clippy --all-features

  build:
    name: Build
    env:
      CARGO_BIN_NAME: bdiff
    strategy:
      matrix:
        include:
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: linux-x86_64
            build: zigbuild
          - platform: ubuntu-latest
            target: i686-unknown-linux-musl
            name: linux-i686
            build: zigbuild
          - platform: ubuntu-latest
            target: aarch64-unknown-linux-musl
            name: linux-aarch64
            build: zigbuild
          - platform: windows-latest
            target: i686-pc-windows-msvc
            name: windows-x86
            build: build
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
            build: build
          - platform: windows-latest
            target: aarch64-pc-windows-msvc
            name: windows-arm64
            build: build
          - platform: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
            build: build
          - platform: macos-latest
            target: aarch64-apple-darwin
            name: macos-arm64
            build: build
      fail-fast: false
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install dependencies
        if: matrix.packages != ''
        run: |
          sudo apt-get -y update
          sudo apt-get -y install ${{ matrix.packages }}
      - name: Install cargo-zigbuild
        if: matrix.build == 'zigbuild'
        run: |
          python3 -m venv .venv
          . .venv/bin/activate
          echo PATH=$PATH >> $GITHUB_ENV
          pip install ziglang==0.13.0 cargo-zigbuild==0.19.1
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Cache Rust workspace
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
      - name: Cargo build
        run: >
          cargo ${{ matrix.build }} --profile ${{ env.BUILD_PROFILE }} --target ${{ matrix.target }}
          --bin ${{ env.CARGO_BIN_NAME }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CARGO_BIN_NAME }}-${{ matrix.name }}
          path: |
            ${{ env.CARGO_TARGET_DIR }}/${{ matrix.target }}/${{ env.BUILD_PROFILE }}/${{ env.CARGO_BIN_NAME }}
            ${{ env.CARGO_TARGET_DIR }}/${{ matrix.target }}/${{ env.BUILD_PROFILE }}/${{ env.CARGO_BIN_NAME }}.exe
          if-no-files-found: error

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [ build ]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check git tag against Cargo version
        shell: bash
        run: |
          set -eou pipefail
          tag='${{github.ref}}'
          tag="${tag#refs/tags/}"
          version=$(grep '^version' Cargo.toml | head -1 | awk -F' = ' '{print $2}' | tr -d '"')
          version="v$version"
          if [ "$tag" != "$version" ]; then
            echo "::error::Git tag doesn't match the Cargo version! ($tag != $version)"
            exit 1
          fi
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Rename artifacts
        working-directory: artifacts
        run: |
          set -euo pipefail
          mkdir ../out
          for dir in */; do
            for file in "$dir"*; do
              base=$(basename "$file")
              name="${base%.*}"
              ext="${base##*.}"
              if [ "$ext" = "$base" ]; then
                  ext=""
              else
                  ext=".$ext"
              fi
              arch="${dir%/}" # remove trailing slash
              arch="${arch##"$name-"}" # remove bin name
              dst="../out/${name}-${arch}${ext}"
              mv "$file" "$dst"
            done
          done
          ls -R ../out
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: out/*
          draft: true
          generate_release_notes: true